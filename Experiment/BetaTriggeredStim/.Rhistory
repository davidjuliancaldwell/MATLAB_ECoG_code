#doses:
predDataGroups$PPvec=predict(fit.nlme1,newdata=predDataGroups)
p4 <- ggplot(dataToFit, aes(x=stimLevelVec, y=PPvec,colour=stimLevelVec)) +
geom_jitter(width=35) +
facet_wrap(~blockVec, labeller = as_labeller(blockNames))+
labs(x = expression(paste("Stimulation current ",mu,"A")),y=expression(paste("Peak to Peak magnitude ",mu,"V"), fill="stimulus level"),title = paste0("Subject ", subjectNum, " ID ", sid," DBS Paired Pulse EP Measurements")) +
guides(colour=guide_legend("stimulation level"))+
geom_line(data=predDataGroups,aes(x=stimLevelVec,y=PPvec),size=2,colour='black')
print(p4)
if (savePlot && !avgMeas) {
ggsave(paste0("subj_", subjectNum, "_ID_", sid,"_scatter_diffModel.png"), units="in", width=figWidth, height=figHeight, dpi=600)
}
else if (savePlot && avgMeas) {
ggsave(paste0("subj_", subjectNum, "_ID_", sid,"_scatter_diffModel_avg.png"), units="in", width=figWidth, height=figHeight, dpi=600)
}
# xtra ss test
#   anova(fit.nlme0, fit.nlme1)
# Likelihood ratio test
#  lrtest(fit.nlme0, fit.nlme1,fit.glm,fit.lmm)
# aic
# AIC(fit.nlme0, fit.nlme1,fit.glm,fit.lmm)
#BIC(fit.nlme0, fit.nlme1,fit.glm,fit.lmm)
}
}
}
#http://rstudio-pubs-static.s3.amazonaws.com/28730_850cac53898b45da8050f7f622d48927.html
install.packages('here')
library("here")
library('here')
library('nlme')
library('ggplot2')
library('drc')
library('minpack.lm')
library('lmtest')
library('glmm')
library("lme4")
library('multcomp')
rootDir = here()
dataDir = here("DBS_CCEP_PairedPulse","R_data")
codeDir = here("DBS_CCEP_PairedPulse","R_code")
#sidVec <- c('46c2a','9f852','08b13','8e907')
#sidVec <- c('8e907')
#sidVec <- c('46c2a')
sidVec <- c('08b13')
#sidVec <- c('9f852')
savePlot = 0
avgMeasVec = c(0,1)
figWidth = 8
figHeight = 6
for (avgMeas in avgMeasVec) {
for (sid in sidVec){
source(here("DBS_CCEP_PairedPulse","R_config_files",paste0("subj_",sid,".R")))
if (avgMeas) {
dataPP <- read.table(here("DBS_CCEP_PairedPulse","R_data",paste0(sid,'_PairedPulseData_avg.csv')),header=TRUE,sep = ",",stringsAsFactors=F, colClasses=c("stimLevelVec"="numeric","sidVec"="character"))
} else{
dataPP <- read.table(here("DBS_CCEP_PairedPulse","R_data",paste0(sid,'_PairedPulseData.csv')),header=TRUE,sep = ",",stringsAsFactors=F, colClasses=c("stimLevelVec"="numeric","sidVec"="character"))
}
# multiply by 1e6
dataPP$PPvec = dataPP$PPvec*1e6
# change to factor
dataPP$blockVec = as.factor(dataPP$blockVec)
print(sid)
for (chanInt in chanIntVec){
dataInt <- na.exclude(subset(dataPP,(chanVec == chanInt) & (blockVec %in% blockIntPlot)))
p <- ggplot(dataInt, aes(x=stimLevelVec, y=PPvec,colour=stimLevelVec)) +
geom_jitter(width=35) +  geom_smooth(method=lm) + facet_wrap(~blockVec, labeller = as_labeller(blockNames))+
labs(x = expression(paste("Stimulation current ",mu,"A")),y=expression(paste("Peak to Peak magnitude ",mu,"V"), fill="stimulus level"),title = paste0("Subject ", subjectNum, " ID ", sid," DBS Paired Pulse EP Measurements")) +
guides(colour=guide_legend("stimulation level"))
print(p)
if (savePlot && !avgMeas) {
ggsave(paste0("subj_", subjectNum, "_ID_", sid,"_scatter_lm.png"), units="in", width=figWidth, height=figHeight, dpi=600)
}
else if (savePlot && avgMeas){
ggsave(paste0("subj_", subjectNum, "_ID_", sid,"_scatter_lm_avg.png"), units="in", width=figWidth, height=figHeight, dpi=600)
}
dataToFit <- na.exclude(dataPP[dataPP$blockVec %in% blockIntLM & dataPP$chanVec==chanInt,])
fit.glm    = glm(PPvec ~ blockVec + stimLevelVec,data=dataToFit)
summary(fit.glm)
summary(glht(fit.glm,linfct=mcp(blockVec="Tukey")))
# plot(fit.glm)
# # fit.lmm = lmer(PPvec ~ stimLevelVec + blockVec + (1|stimLevelVec) + (1|blockVec), data=dataToFit)
# # summary(fit.lmm)
#  #confint(fit.lmm,method="boot")
#
#  # get starting values
#  if (sid != '8e907') {
#    fit.startnlme0 <- nlsLM(PPvec ~ SSlogis(stimLevelVec, Asym, xmid, scal),data=dataToFit)
#  } else {
#    fit.startnlme0 <- nlsLM(PPvec ~ SSlogis(stimLevelVec, Asym, xmid, scal),data=dataToFit,start = c(Asym=400,xmid = 500,scal = 500),control = list(maxiter = 500))
#  }
#
#  startVals = summary(fit.startnlme0)$coefficients
#
#  if (sid == '08b13') {
#    fit.nlme0 <- gnls(PPvec ~ SSlogis(stimLevelVec, Asym, xmid, scal),data=dataToFit,
#                      start=list(Asym=startVals[1,1]+200,xmid=startVals[2,1],scal=startVals[3,1]))
#  }else if (sid=='8e907') {
#    fit.nlme0 <- gnls(PPvec ~ SSlogis(stimLevelVec, Asym, xmid, scal),data=dataToFit,
#                      start=list(Asym=startVals[1,1]+200,xmid=startVals[2,1],scal=startVals[3,1]),control = list(maxiter = 500))
#  }else {
#    fit.nlme0 <- gnls(PPvec ~ SSlogis(stimLevelVec, Asym, xmid, scal),data=dataToFit,
#                      start=list(Asym=startVals[1,1]+200,xmid=startVals[2,1],scal=startVals[3,1]))
#  }
#
#  #Create a range of doses:
#  stimLevelVecNew <- data.frame(stimLevelVec = seq(min(dataToFit$stimLevelVec), max(dataToFit$stimLevelVec), length.out = 200))
#  #Create a new data frame for ggplot using predict and your range of new
#  #doses:
#  predData=data.frame(PPvec=predict(fit.nlme0,newdata=stimLevelVecNew),stimLevelVec=stimLevelVecNew)
#
#  p3 <- ggplot(dataToFit, aes(x=stimLevelVec, y=PPvec,colour=stimLevelVec)) +
#    geom_jitter(width=35) +
#    facet_wrap(~blockVec, labeller = as_labeller(blockNames))+
#    labs(x = expression(paste("Stimulation current ",mu,"A")),y=expression(paste("Peak to Peak magnitude ",mu,"V"), fill="stimulus level"),title = paste0("Subject ", subjectNum, " ID ", sid," DBS Paired Pulse EP Measurements")) +
#    guides(colour=guide_legend("stimulation level"))+ geom_line(data=predData,aes(x=stimLevelVec,y=PPvec),size=2,colour='black')
#  print(p3)
#
#  if (savePlot && !avgMeas) {
#    ggsave(paste0("subj_", subjectNum, "_ID_", sid,"_scatter_sameModel.png"), units="in", width=figWidth, height=figHeight, dpi=600)
#  }
#  else if (savePlot && avgMeas){
#    ggsave(paste0("subj_", subjectNum, "_ID_", sid,"_scatter_sameModel_avg.png"), units="in", width=figWidth, height=figHeight, dpi=600)
#
#  }
fit.nlme1 <- nlme(PPvec ~ SSlogis(stimLevelVec, Asym, xmid, scal),
fixed=list(Asym ~ blockVec, xmid + scal ~ 1),
random = scal ~ 1|blockVec,
start=list(fixed=c(Asym=rep(startVals[1,1]+200,length(blockIntLM)),xmid=startVals[2,1],scal=startVals[3,1])),
data=dataToFit)
# vs.   fixed=list(Asym ~ blockVec, xmid + scal ~ 1),
#Create a range of doses:
predDataGroups <-expand.grid(stimLevelVec = seq(min(dataToFit$stimLevelVec), max(dataToFit$stimLevelVec), length.out = 100),blockVec = unique(dataToFit$blockVec))
#Create a new data frame for ggplot using predict and your range of new
#doses:
predDataGroups$PPvec=predict(fit.nlme1,newdata=predDataGroups)
p4 <- ggplot(dataToFit, aes(x=stimLevelVec, y=PPvec,colour=stimLevelVec)) +
geom_jitter(width=35) +
facet_wrap(~blockVec, labeller = as_labeller(blockNames))+
labs(x = expression(paste("Stimulation current ",mu,"A")),y=expression(paste("Peak to Peak magnitude ",mu,"V"), fill="stimulus level"),title = paste0("Subject ", subjectNum, " ID ", sid," DBS Paired Pulse EP Measurements")) +
guides(colour=guide_legend("stimulation level"))+
geom_line(data=predDataGroups,aes(x=stimLevelVec,y=PPvec),size=2,colour='black')
print(p4)
if (savePlot && !avgMeas) {
ggsave(paste0("subj_", subjectNum, "_ID_", sid,"_scatter_diffModel.png"), units="in", width=figWidth, height=figHeight, dpi=600)
}
else if (savePlot && avgMeas) {
ggsave(paste0("subj_", subjectNum, "_ID_", sid,"_scatter_diffModel_avg.png"), units="in", width=figWidth, height=figHeight, dpi=600)
}
# xtra ss test
#   anova(fit.nlme0, fit.nlme1)
# Likelihood ratio test
#  lrtest(fit.nlme0, fit.nlme1,fit.glm,fit.lmm)
# aic
# AIC(fit.nlme0, fit.nlme1,fit.glm,fit.lmm)
#BIC(fit.nlme0, fit.nlme1,fit.glm,fit.lmm)
}
}
}
#http://rstudio-pubs-static.s3.amazonaws.com/28730_850cac53898b45da8050f7f622d48927.html
rootDir
here
rootDir
codeDir
cd codeDir
3+3
source(here("DBS_CCEP_PairedPulse","R_config_files",paste0("subj_",sid,".R")))
rootDir
install.packages('stargazer')
# ----
setwd('C:/Users/david/SharedCode/MATLAB_ECoG_code/Experiment/BetaTriggeredStim/')
library('Hmisc')
library('nlme')
library('ggplot2')
library('drc')
library('minpack.lm')
library('lmtest')
library('glmm')
library("lme4")
library('multcomp')
library('plyr')
library('here')
library('lmerTest')
library('stargazer')
rootDir = here()
savePlot = 0
figWidth = 8
figHeight = 6
# ----
data <- read.table(here("Experiment","BetaTriggeredStim","betaStim_outputTable_100.csv"),header=TRUE,sep = ",",stringsAsFactors=F,
colClasses=c("magnitude"="numeric","betaLabels"="factor","sid"="factor","numStims"="factor","stimLevel"="numeric","channel"="factor","subjectNum"="factor","phaseClass"="factor","setToDeliverPhase"="factor"))
#data <- subset(data, magnitude<800)
data <- subset(data,!is.nan(data$magnitude))
data <- subset(data,data$sid!='702d24')
data <- subset(data,data$sid!='0b5a2ePlayBack')
data <- subset(data,data$numStims!='Null')
# rename for ease
data$numStims <- revalue(data$numStims, c("Test 1"="[1,2]","Test 2"="[3,4]","Test 3"="[5,inf)"))
#data$phaseClass <- revalue(data$phaseClass, c("90"=0,"270"=1))
data$percentDiff = 0
for (name in unique(data$sid)){
for (chan in unique(data[data$sid == name,]$channel)){
for (numStimTrial in unique(data$numStims)){
numBase = nrow(data[data$sid == name & data$channel == chan & data$numStims == 'Base',])
base = data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$magnitude
baseMean = mean(base)
data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$percentDiff = 100*(base - baseMean)/baseMean
for (typePhase in unique(data$phaseClass)){
percentDiff = 100*((data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$magnitude)-baseMean)/baseMean
data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$percentDiff = percentDiff
}
}
}
}
sapply(data,class)
#summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), function(x) mean(x[,"percentDiff"]))
summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel,betaLabels), summarize, percentDiff = mean(percentDiff))
dataNoBaseline = data[data$numStims != "Base",]
dataSubjOnly <- subset(data,data$sid=='0b5a2e')
fit.lmm3 = lmer(percentDiff~numStims+phaseClass + betaLabels  + numStims*betaLabels + numStims*phaseClass + (1 | sid/channel) ,data=dataNoBaseline)
stargazer(summary(fit.lmm3))
stargazer(fit.lmm3)
fit.lmm3
install.packages('sjPlot')
library('sjPlot')
qqnorm(resid(fit.lmm3))
sjt.lmer(fit.lmm3)
fit.lmm3
sjt.lm(fit.lmm3)
tatab_model(fit.lmm3)
tab_model(fit.lmm3)
detach('lmerTest')
detach(lmerTest)
detach(package:lmerTest)
library('sjPlot')
tab_model(fit.lmm3)
library("lme4")
fit.lmm3 = lmer(percentDiff~numStims+phaseClass + betaLabels  + numStims*betaLabels + numStims*phaseClass + (1 | sid/channel) ,data=dataNoBaseline)
tab_model(fit.lmm3)
# ----
setwd('C:/Users/david/SharedCode/MATLAB_ECoG_code/Experiment/BetaTriggeredStim/')
library('Hmisc')
library('nlme')
library('ggplot2')
library('drc')
library('minpack.lm')
library('lmtest')
library('glmm')
library("lme4")
library('multcomp')
library('plyr')
library('here')
library('lmerTest')
library('sjPlot')
rootDir = here()
savePlot = 0
figWidth = 8
figHeight = 6
# ----
data <- read.table(here("Experiment","BetaTriggeredStim","betaStim_outputTable_30.csv"),header=TRUE,sep = ",",stringsAsFactors=F,
colClasses=c("magnitude"="numeric","betaLabels"="factor","sid"="factor","numStims"="factor","stimLevel"="numeric","channel"="factor","subjectNum"="factor","phaseClass"="factor","setToDeliverPhase"="factor"))
#data <- subset(data, magnitude<800)
data <- subset(data,!is.nan(data$magnitude))
data <- subset(data,data$sid!='702d24')
data <- subset(data,data$sid!='0b5a2ePlayBack')
data <- subset(data,data$numStims!='Null')
# rename for ease
data$numStims <- revalue(data$numStims, c("Test 1"="[1,2]","Test 2"="[3,4]","Test 3"="[5,inf)"))
#data$phaseClass <- revalue(data$phaseClass, c("90"=0,"270"=1))
data$percentDiff = 0
for (name in unique(data$sid)){
for (chan in unique(data[data$sid == name,]$channel)){
for (numStimTrial in unique(data$numStims)){
numBase = nrow(data[data$sid == name & data$channel == chan & data$numStims == 'Base',])
base = data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$magnitude
baseMean = mean(base)
data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$percentDiff = 100*(base - baseMean)/baseMean
for (typePhase in unique(data$phaseClass)){
percentDiff = 100*((data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$magnitude)-baseMean)/baseMean
data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$percentDiff = percentDiff
}
}
}
}
fit.lmm3 = lmer(percentDiff~numStims+phaseClass + betaLabels  + numStims*betaLabels + numStims*phaseClass + (1 | sid/channel) ,data=dataNoBaseline)
summary(fit.lmm3)
# ----
data <- read.table(here("Experiment","BetaTriggeredStim","betaStim_outputTable_30.csv"),header=TRUE,sep = ",",stringsAsFactors=F,
colClasses=c("magnitude"="numeric","betaLabels"="factor","sid"="factor","numStims"="factor","stimLevel"="numeric","channel"="factor","subjectNum"="factor","phaseClass"="factor","setToDeliverPhase"="factor"))
data <- subset(data, magnitude<800)
data <- subset(data,!is.nan(data$magnitude))
data <- subset(data,data$sid!='702d24')
data <- subset(data,data$sid!='0b5a2ePlayBack')
data <- subset(data,data$numStims!='Null')
# rename for ease
data$numStims <- revalue(data$numStims, c("Test 1"="[1,2]","Test 2"="[3,4]","Test 3"="[5,inf)"))
#data$phaseClass <- revalue(data$phaseClass, c("90"=0,"270"=1))
data$percentDiff = 0
for (name in unique(data$sid)){
for (chan in unique(data[data$sid == name,]$channel)){
for (numStimTrial in unique(data$numStims)){
numBase = nrow(data[data$sid == name & data$channel == chan & data$numStims == 'Base',])
base = data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$magnitude
baseMean = mean(base)
data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$percentDiff = 100*(base - baseMean)/baseMean
for (typePhase in unique(data$phaseClass)){
percentDiff = 100*((data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$magnitude)-baseMean)/baseMean
data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$percentDiff = percentDiff
}
}
}
}
sapply(data,class)
#summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), function(x) mean(x[,"percentDiff"]))
summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel,betaLabels), summarize, percentDiff = mean(percentDiff))
dataNoBaseline = data[data$numStims != "Base",]
dataSubjOnly <- subset(data,data$sid=='0b5a2e')
# ----
fit.lmm3 = lmer(percentDiff~numStims+phaseClass + betaLabels  + numStims*betaLabels + numStims*phaseClass + (1 | sid/channel) ,data=dataNoBaseline)
summary(fit.lmm3)
# ----
setwd('C:/Users/david/SharedCode/MATLAB_ECoG_code/Experiment/BetaTriggeredStim/')
library('Hmisc')
library('nlme')
library('ggplot2')
library('drc')
library('minpack.lm')
library('lmtest')
library('glmm')
library("lme4")
library('multcomp')
library('plyr')
library('here')
library('lmerTest')
library('sjPlot')
rootDir = here()
savePlot = 0
figWidth = 8
figHeight = 6
# ----
data <- read.table(here("Experiment","BetaTriggeredStim","betaStim_outputTable_50.csv"),header=TRUE,sep = ",",stringsAsFactors=F,
colClasses=c("magnitude"="numeric","betaLabels"="factor","sid"="factor","numStims"="factor","stimLevel"="numeric","channel"="factor","subjectNum"="factor","phaseClass"="factor","setToDeliverPhase"="factor"))
data <- subset(data, magnitude<800)
data <- subset(data,!is.nan(data$magnitude))
data <- subset(data,data$sid!='702d24')
data <- subset(data,data$sid!='0b5a2ePlayBack')
data <- subset(data,data$numStims!='Null')
# rename for ease
data$numStims <- revalue(data$numStims, c("Test 1"="[1,2]","Test 2"="[3,4]","Test 3"="[5,inf)"))
#data$phaseClass <- revalue(data$phaseClass, c("90"=0,"270"=1))
data$percentDiff = 0
for (name in unique(data$sid)){
for (chan in unique(data[data$sid == name,]$channel)){
for (numStimTrial in unique(data$numStims)){
numBase = nrow(data[data$sid == name & data$channel == chan & data$numStims == 'Base',])
base = data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$magnitude
baseMean = mean(base)
data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$percentDiff = 100*(base - baseMean)/baseMean
for (typePhase in unique(data$phaseClass)){
percentDiff = 100*((data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$magnitude)-baseMean)/baseMean
data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$percentDiff = percentDiff
}
}
}
}
fit.lmm3 = lmer(percentDiff~numStims+phaseClass + betaLabels  + numStims*betaLabels + numStims*phaseClass + (1 | sid/channel) ,data=dataNoBaseline)
summary(fit.lmm3)
# ----
data <- read.table(here("Experiment","BetaTriggeredStim","betaStim_outputTable_50.csv"),header=TRUE,sep = ",",stringsAsFactors=F,
colClasses=c("magnitude"="numeric","betaLabels"="factor","sid"="factor","numStims"="factor","stimLevel"="numeric","channel"="factor","subjectNum"="factor","phaseClass"="factor","setToDeliverPhase"="factor"))
data <- subset(data, magnitude<1000)
data <- subset(data,!is.nan(data$magnitude))
data <- subset(data,data$sid!='702d24')
data <- subset(data,data$sid!='0b5a2ePlayBack')
data <- subset(data,data$numStims!='Null')
# rename for ease
data$numStims <- revalue(data$numStims, c("Test 1"="[1,2]","Test 2"="[3,4]","Test 3"="[5,inf)"))
#data$phaseClass <- revalue(data$phaseClass, c("90"=0,"270"=1))
data$percentDiff = 0
for (name in unique(data$sid)){
for (chan in unique(data[data$sid == name,]$channel)){
for (numStimTrial in unique(data$numStims)){
numBase = nrow(data[data$sid == name & data$channel == chan & data$numStims == 'Base',])
base = data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$magnitude
baseMean = mean(base)
data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$percentDiff = 100*(base - baseMean)/baseMean
for (typePhase in unique(data$phaseClass)){
percentDiff = 100*((data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$magnitude)-baseMean)/baseMean
data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$percentDiff = percentDiff
}
}
}
}
sapply(data,class)
#summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), function(x) mean(x[,"percentDiff"]))
summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel,betaLabels), summarize, percentDiff = mean(percentDiff))
dataNoBaseline = data[data$numStims != "Base",]
dataSubjOnly <- subset(data,data$sid=='0b5a2e')
fit.lmm3 = lmer(percentDiff~numStims+phaseClass + betaLabels  + numStims*betaLabels + numStims*phaseClass + (1 | sid/channel) ,data=dataNoBaseline)
summary(fit.lmm3)
# ----
setwd('C:/Users/david/SharedCode/MATLAB_ECoG_code/Experiment/BetaTriggeredStim/')
library('Hmisc')
library('nlme')
library('ggplot2')
library('drc')
library('minpack.lm')
library('lmtest')
library('glmm')
library("lme4")
library('multcomp')
library('plyr')
library('here')
library('lmerTest')
library('sjPlot')
rootDir = here()
savePlot = 0
figWidth = 8
figHeight = 6
# ----
data <- read.table(here("Experiment","BetaTriggeredStim","betaStim_outputTable_3avg_50.csv"),header=TRUE,sep = ",",stringsAsFactors=F,
colClasses=c("magnitude"="numeric","betaLabels"="factor","sid"="factor","numStims"="factor","stimLevel"="numeric","channel"="factor","subjectNum"="factor","phaseClass"="factor","setToDeliverPhase"="factor"))
data <- subset(data, magnitude<1000)
data <- subset(data,!is.nan(data$magnitude))
data <- subset(data,data$sid!='702d24')
data <- subset(data,data$sid!='0b5a2ePlayBack')
data <- subset(data,data$numStims!='Null')
# rename for ease
data$numStims <- revalue(data$numStims, c("Test 1"="[1,2]","Test 2"="[3,4]","Test 3"="[5,inf)"))
#data$phaseClass <- revalue(data$phaseClass, c("90"=0,"270"=1))
data$percentDiff = 0
for (name in unique(data$sid)){
for (chan in unique(data[data$sid == name,]$channel)){
for (numStimTrial in unique(data$numStims)){
numBase = nrow(data[data$sid == name & data$channel == chan & data$numStims == 'Base',])
base = data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$magnitude
baseMean = mean(base)
data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$percentDiff = 100*(base - baseMean)/baseMean
for (typePhase in unique(data$phaseClass)){
percentDiff = 100*((data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$magnitude)-baseMean)/baseMean
data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$percentDiff = percentDiff
}
}
}
}
sapply(data,class)
#summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), function(x) mean(x[,"percentDiff"]))
summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel,betaLabels), summarize, percentDiff = mean(percentDiff))
dataNoBaseline = data[data$numStims != "Base",]
dataSubjOnly <- subset(data,data$sid=='0b5a2e')
# ----
# ----
setwd('C:/Users/david/SharedCode/MATLAB_ECoG_code/Experiment/BetaTriggeredStim/')
library('Hmisc')
library('nlme')
library('ggplot2')
library('drc')
library('minpack.lm')
library('lmtest')
library('glmm')
library("lme4")
library('multcomp')
library('plyr')
library('here')
library('lmerTest')
library('sjPlot')
rootDir = here()
savePlot = 0
figWidth = 8
figHeight = 6
# ----
data <- read.table(here("Experiment","BetaTriggeredStim","betaStim_outputTable_50_3avg.csv"),header=TRUE,sep = ",",stringsAsFactors=F,
colClasses=c("magnitude"="numeric","betaLabels"="factor","sid"="factor","numStims"="factor","stimLevel"="numeric","channel"="factor","subjectNum"="factor","phaseClass"="factor","setToDeliverPhase"="factor"))
data <- subset(data, magnitude<1000)
data <- subset(data,!is.nan(data$magnitude))
data <- subset(data,data$sid!='702d24')
data <- subset(data,data$sid!='0b5a2ePlayBack')
data <- subset(data,data$numStims!='Null')
# rename for ease
data$numStims <- revalue(data$numStims, c("Test 1"="[1,2]","Test 2"="[3,4]","Test 3"="[5,inf)"))
#data$phaseClass <- revalue(data$phaseClass, c("90"=0,"270"=1))
data$percentDiff = 0
for (name in unique(data$sid)){
for (chan in unique(data[data$sid == name,]$channel)){
for (numStimTrial in unique(data$numStims)){
numBase = nrow(data[data$sid == name & data$channel == chan & data$numStims == 'Base',])
base = data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$magnitude
baseMean = mean(base)
data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$percentDiff = 100*(base - baseMean)/baseMean
for (typePhase in unique(data$phaseClass)){
percentDiff = 100*((data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$magnitude)-baseMean)/baseMean
data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$percentDiff = percentDiff
}
}
}
}
sapply(data,class)
#summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), function(x) mean(x[,"percentDiff"]))
summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel,betaLabels), summarize, percentDiff = mean(percentDiff))
dataNoBaseline = data[data$numStims != "Base",]
dataSubjOnly <- subset(data,data$sid=='0b5a2e')
fit.lmm3 = lmer(percentDiff~numStims+phaseClass + betaLabels  + numStims*betaLabels + numStims*phaseClass + (1 | sid/channel) ,data=dataNoBaseline)
summary(fit.lmm3)
pd1 = position_dodge(0.2)
pd2 = position_dodge(0.65)
p2 <- ggplot(summaryData, aes(x=numStims, y=percentDiff,color=phaseClass)) + theme_light(base_size = 18) +
geom_point(position=position_jitterdodge(dodge.width=0.65, jitter.height=0, jitter.width=0.25),
alpha=0.7) +
stat_summary(fun.data=median_hilow,fun.args=(conf.int =0.5), geom="errorbar", width=0.05, position=pd1) +
stat_summary(fun.y=median, geom="point", size=2, position=pd1) +
labs(x = 'Number of conditioning stimuli',colour = 'delivered phase',title = 'Dose dependence as a function of phase of stimulation',y = 'Percent difference from baseline')+
geom_hline(yintercept=0)
p2
