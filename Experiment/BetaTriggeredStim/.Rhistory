position=position_dodge(0.8))
p2 <- ggplot(dataNoBaseline, aes(x=numStims, y=percentDiff,fill=phaseClass)) + theme_classic(base_size = 18) +
geom_dotplot(binaxis='y',binwidth=2,stackdir='center',
position=position_dodge(0.8))
fit.glm
#fit.glm    = glm(magnitude ~ stimLevel + numStims + subjectNum + channel + phaseClass,data=data)
#fit.glm    = glm(magnitude ~ numStims + channel + phaseClass,data=data)
fit.glm    = glm(percentDiff ~ numStims+phaseClass+betaLabels+channel,data=dataNoBaseline)
fit.glm
plot(fit.glm)
setwd('C:/Users/david/SharedCode/MATLAB_ECoG_code/Experiment/BetaTriggeredStim/')
library('nlme')
library('ggplot2')
library('drc')
library('minpack.lm')
library('lmtest')
library('glmm')
library("lme4")
library('multcomp')
library('plyr')
library('here')
rootDir = here()
savePlot = 0
figWidth = 8
figHeight = 6
# ----
data <- read.table(here("Experiment","BetaTriggeredStim","betaStim_outputTable_100.csv"),header=TRUE,sep = ",",stringsAsFactors=F,
colClasses=c("magnitude"="numeric","betaLabels"="factor","sid"="factor","numStims"="factor","stimLevel"="numeric","channel"="factor","subjectNum"="factor","phaseClass"="factor","setToDeliverPhase"="factor"))
data <- subset(data, magnitude<1000)
data <- subset(data,!is.nan(data$magnitude))
# rename for ease
data$numStims <- revalue(data$numStims, c("Test 1"="[1,2]","Test 2"="[3,4]","Test 3"="[5,inf)"))
data$percentDiff = 0
for (name in unique(data$sid)){
for (chan in unique(data[data$sid == name,]$channel)){
for (numStimTrial in unique(data$numStims)){
numBase = nrow(data[data$sid == name & data$channel == chan & data$numStims == 'Base',])
base = data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$magnitude
baseMean = mean(base)
data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$percentDiff = 100*(base - baseMean)/baseMean
for (typePhase in unique(data$phaseClass)){
percentDiff = 100*((data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$magnitude)-baseMean)/baseMean
data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$percentDiff = percentDiff
}
}
}
}
#summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), function(x) mean(x[,"percentDiff"]))
summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), summarize, percentDiff = mean(percentDiff))
dataNoBaseline = data[data$numStims != "Base",]
# ----
fit.glm    = glm(percentDiff ~ numStims+phaseClass+betaLabels+channel,data=dataNoBaseline)
plot(fit.glm)
# ----
setwd('C:/Users/david/SharedCode/MATLAB_ECoG_code/Experiment/BetaTriggeredStim/')
library('nlme')
library('ggplot2')
library('drc')
library('minpack.lm')
library('lmtest')
library('glmm')
library("lme4")
library('multcomp')
library('plyr')
library('here')
rootDir = here()
savePlot = 0
figWidth = 8
figHeight = 6
# ----
data <- read.table(here("Experiment","BetaTriggeredStim","betaStim_outputTable_50.csv"),header=TRUE,sep = ",",stringsAsFactors=F,
colClasses=c("magnitude"="numeric","betaLabels"="factor","sid"="factor","numStims"="factor","stimLevel"="numeric","channel"="factor","subjectNum"="factor","phaseClass"="factor","setToDeliverPhase"="factor"))
data <- subset(data, magnitude<1000)
data <- subset(data,!is.nan(data$magnitude))
# rename for ease
data$numStims <- revalue(data$numStims, c("Test 1"="[1,2]","Test 2"="[3,4]","Test 3"="[5,inf)"))
data$percentDiff = 0
for (name in unique(data$sid)){
for (chan in unique(data[data$sid == name,]$channel)){
for (numStimTrial in unique(data$numStims)){
numBase = nrow(data[data$sid == name & data$channel == chan & data$numStims == 'Base',])
base = data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$magnitude
baseMean = mean(base)
data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$percentDiff = 100*(base - baseMean)/baseMean
for (typePhase in unique(data$phaseClass)){
percentDiff = 100*((data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$magnitude)-baseMean)/baseMean
data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$percentDiff = percentDiff
}
}
}
}
#summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), function(x) mean(x[,"percentDiff"]))
summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), summarize, percentDiff = mean(percentDiff))
dataNoBaseline = data[data$numStims != "Base",]
fit.lmm2 = lmer(percentDiff~numStims+phaseClass+betaLabels + (1 | sid/channel) ,data=dataNoBaseline)
plot(fit.lmm2)
display(fit.lmm2)
anova(fit.glm,fit.lmm2)
aic(fit.glm,fit.lmm2)
AIC(fit.glm,fit.lmm2)
BIC(fit.glm,fit.lmm2)
#fit.glm    = glm(magnitude ~ stimLevel + numStims + subjectNum + channel + phaseClass,data=data)
#fit.glm    = glm(magnitude ~ numStims + channel + phaseClass,data=data)
fit.glm    = glm(percentDiff ~ numStims+phaseClass+betaLabels,data=dataNoBaseline)
summary(fit.glm)
plot(fit.glm)
AIC(fit.glm,fit.lmm2)
BIC(fit.glm,fit.lmm2)
p2 <- ggplot(dataNoBaseline, aes(x=numStims, y=percentDiff,fill=phaseClass)) + theme_classic(base_size = 18) +
geom_dotplot(binaxis='y',binwidth=2,stackdir='center',
position=position_dodge(0.8))
p2 <- ggplot(dataNoBaseline, aes(x=numStims, y=percentDiff,fill=phaseClass)) + theme_classic(base_size = 18) +
geom_dotplot(binaxis='y',binwidth=2,stackdir='center',
position=position_dodge(0.8)) +
geom_line(data = dataNoBaseline, aes(y=predict(fit.glm,newdata = dataNoBaseline)))
p2 <- ggplot(dataNoBaseline, aes(x=numStims, y=percentDiff,fill=phaseClass)) + theme_classic(base_size = 18) +
geom_dotplot(binaxis='y',binwidth=2,stackdir='center',
position=position_dodge(0.8)) +
geom_line(data = dataNoBaseline, aes(y=predict(fit.glm,newdata = dataNoBaseline))) +
labs(x = 'Number of conditioning stimuli',colour = 'delivered phase',title = 'Dose dependence as a function of phase of stimulation',y = 'Percent difference from baseline')+
geom_hline(yintercept=0)
p2
ggplot(dataNoBaseline, aes(x=numStims, y=percentDiff,fill=phaseClass))
p2 <- ggplot(dataNoBaseline, aes(x=numStims, y=percentDiff,fill=phaseClass))
p2 +   geom_line(data = dataNoBaseline, aes(y=predict(fit.glm,newdata = dataNoBaseline)))
p2
p2
p2 +   geom_line(data = dataNoBaseline, aes(y=predict(fit.glm,newdata = dataNoBaseline)))
p2 +  geom_line(data = dataNoBaseline, aes(y=predict(fit.glm,level=1,newdata = dataNoBaseline)))
p2 +  geom_line(data = dataNoBaseline, aes(y=predict(fit.glm,level=2,newdata = dataNoBaseline)))
p2 +   geom_dotplot(data = dataNoBaseline, aes(y=predict(fit.glm,level=1,newdata = dataNoBaseline))) +
geom_dotplot(data = dataNoBaseline, aes(y=predict(fit.glm,level=1,newdata = dataNoBaseline))) +
p2
p2 +   geom_dotplot(data = dataNoBaseline, aes(y=predict(fit.glm,level=1,newdata = dataNoBaseline)))
p2
p2 +   geom_dotplot(data = dataNoBaseline, aes(y=predict(fit.glm,level=1,newdata = dataNoBaseline)),binwidth = 2)
p2 +   geom_dotplot(data = dataNoBaseline, aes(y=predict(fit.glm,level=1,newdata = dataNoBaseline)),binwidth = 1)
p2 +   geom_dotplot(data = dataNoBaseline, aes(y=predict(fit.glm,level=1,newdata = dataNoBaseline)),binwidth = 50)
p2 +   geom_dotplot(data = dataNoBaseline, aes(y=predict(fit.glm,level=1,newdata = dataNoBaseline)),binwidth = 20)
p2 +   geom_boxplot(data = dataNoBaseline, aes(y=predict(fit.glm,level=1,newdata = dataNoBaseline)),binwidth = 20)
p2 +   geom_boxplot(data = dataNoBaseline, aes(y=predict(fit.glm,level=1,newdata = dataNoBaseline)))
p2 <- ggplot(dataNoBaseline, aes(x=numStims, y=percentDiff,fill=phaseClass)) + theme_classic(base_size = 18) +
geom_dotplot(binaxis='y',binwidth=2,stackdir='center',
position=position_dodge(0.8)) +
geom_dotplot(data = dataNoBaseline, aes(y=predict(fit.glm,level=0,newdata = dataNoBaseline))) +
labs(x = 'Number of conditioning stimuli',colour = 'delivered phase',title = 'Dose dependence as a function of phase of stimulation',y = 'Percent difference from baseline')+
geom_hline(yintercept=0)
p2
p2 <- ggplot(dataNoBaseline, aes(x=numStims, y=percentDiff,fill=phaseClass)) + theme_classic(base_size = 18) +
geom_boxplot(binaxis='y',binwidth=2,stackdir='center',
position=position_dodge(0.8)) +
geom_dotplot(data = dataNoBaseline, aes(y=predict(fit.glm,level=0,newdata = dataNoBaseline))) +
labs(x = 'Number of conditioning stimuli',colour = 'delivered phase',title = 'Dose dependence as a function of phase of stimulation',y = 'Percent difference from baseline')+
geom_hline(yintercept=0)
p2
figHeight = 6
# ----
data <- read.table(here("Experiment","BetaTriggeredStim","betaStim_outputTable_3avg_50.csv"),header=TRUE,sep = ",",stringsAsFactors=F,
colClasses=c("magnitude"="numeric","betaLabels"="factor","sid"="factor","numStims"="factor","stimLevel"="numeric","channel"="factor","subjectNum"="factor","phaseClass"="factor","setToDeliverPhase"="factor"))
data <- subset(data, magnitude<1000)
data <- subset(data,!is.nan(data$magnitude))
# ----
data <- read.table(here("Experiment","BetaTriggeredStim","betaStim_outputTable_50_3avg.csv"),header=TRUE,sep = ",",stringsAsFactors=F,
colClasses=c("magnitude"="numeric","betaLabels"="factor","sid"="factor","numStims"="factor","stimLevel"="numeric","channel"="factor","subjectNum"="factor","phaseClass"="factor","setToDeliverPhase"="factor"))
data <- subset(data, magnitude<1000)
data <- subset(data,!is.nan(data$magnitude))
# rename for ease
data$numStims <- revalue(data$numStims, c("Test 1"="[1,2]","Test 2"="[3,4]","Test 3"="[5,inf)"))
data$percentDiff = 0
for (name in unique(data$sid)){
for (chan in unique(data[data$sid == name,]$channel)){
for (numStimTrial in unique(data$numStims)){
numBase = nrow(data[data$sid == name & data$channel == chan & data$numStims == 'Base',])
base = data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$magnitude
baseMean = mean(base)
data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$percentDiff = 100*(base - baseMean)/baseMean
for (typePhase in unique(data$phaseClass)){
percentDiff = 100*((data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$magnitude)-baseMean)/baseMean
data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$percentDiff = percentDiff
}
}
}
}
#summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), function(x) mean(x[,"percentDiff"]))
summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), summarize, percentDiff = mean(percentDiff))
dataNoBaseline = data[data$numStims != "Base",]
p2 <- ggplot(summaryData, aes(x=numStims, y=percentDiff,fill=phaseClass)) + theme_classic(base_size = 18) +
geom_dotplot(binaxis='y',binwidth=2,stackdir='center',
position=position_dodge(0.8)) +
geom_pointrange(mapping = aes(x = numStims, y = percentDiff,color=phaseClass),
stat = "summary",
fun.ymin = function(z) {quantile(z,0.25)},
fun.ymax = function(z) {quantile(z,0.75)},
fun.y = median,
position=position_dodge(0.8),size=1.2,color="black",show.legend = FALSE) +
labs(x = 'Number of conditioning stimuli',colour = 'delivered phase',title = 'Dose dependence as a function of phase of stimulation',y = 'Percent difference from baseline')+
geom_hline(yintercept=0)
p2
fit.lmm2 = lmer(percentDiff~numStims+phaseClass+betaLabels + (1 | sid/channel) ,data=dataNoBaseline)
#fit.lmm2 = lmer(percentDiff~numStims+phaseClass+betaLabels + (1 + numStims|sid/channel) + (phaseClass|sid/channel) ,data=dataNoBaseline)
plot(fit.lmm2)
qqnorm(resid(fit.lmm2))
qqline(resid(fit.lmm2))  #summary(fit.lmm2)
confint(fit.lmm2,method="boot")
summary(glht(fit.lmm2,linfct=mcp(numStims="Tukey")))
summary(glht(fit.lmm2,linfct=mcp(betaLabels="Tukey")))
summary(glht(fit.lmm2,linfct=mcp(phaseClass="Tukey")))
y=predict(fit.lmm2,level=0,newdata = dataNoBaseline))
y=predict(fit.lmm2,level=0,newdata = dataNoBaseline)
y=predict(fit.lmm2,newdata = dataNoBaseline)
y
unique(y)
RIaS = unlist(ranef(fit.lmm2))
FixedEff = fixef(fit.lmm2)
RIaS
FixedEff
fit.lmm2
dataNoBaseline
data$phaseClass <- revalue(data$phaseClass, c("90"=0,"270"=1))
data
colnames(data)
unique(data$phaseClass)
# rename for ease
data$numStims <- revalue(data$numStims, c("Test 1"="[1,2]","Test 2"="[3,4]","Test 3"="[5,inf)"))
data$phaseClass <- revalue(data$phaseClass, c("90"=0,"270"=1))
data$percentDiff = 0
for (name in unique(data$sid)){
for (chan in unique(data[data$sid == name,]$channel)){
for (numStimTrial in unique(data$numStims)){
numBase = nrow(data[data$sid == name & data$channel == chan & data$numStims == 'Base',])
base = data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$magnitude
baseMean = mean(base)
data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$percentDiff = 100*(base - baseMean)/baseMean
for (typePhase in unique(data$phaseClass)){
percentDiff = 100*((data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$magnitude)-baseMean)/baseMean
data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$percentDiff = percentDiff
}
}
}
}
#summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), function(x) mean(x[,"percentDiff"]))
summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), summarize, percentDiff = mean(percentDiff))
dataNoBaseline = data[data$numStims != "Base",]
p2 <- ggplot(summaryData, aes(x=numStims, y=percentDiff,fill=phaseClass)) + theme_classic(base_size = 18) +
geom_dotplot(binaxis='y',binwidth=2,stackdir='center',
position=position_dodge(0.8)) +
geom_pointrange(mapping = aes(x = numStims, y = percentDiff,color=phaseClass),
stat = "summary",
fun.ymin = function(z) {quantile(z,0.25)},
fun.ymax = function(z) {quantile(z,0.75)},
fun.y = median,
position=position_dodge(0.8),size=1.2,color="black",show.legend = FALSE) +
labs(x = 'Number of conditioning stimuli',colour = 'delivered phase',title = 'Dose dependence as a function of phase of stimulation',y = 'Percent difference from baseline')+
geom_hline(yintercept=0)
p2
fit.glm    = glm(percentDiff ~ numStims+phaseClass+betaLabels,data=dataNoBaseline)
summary(glht(fit.glm,linfct=mcp(phaseClass="Tukey")))
summary(glht(fit.glm,linfct=mcp(numStims="Tukey")))
summary(fit.glm)
classes(data)
sapply(data,class)
data <- subset(data,data$sid~='702d24')
data <- subset(data,data$sid!='702d24')
data
unique(data$sid)
# rename for ease
data$numStims <- revalue(data$numStims, c("Test 1"="[1,2]","Test 2"="[3,4]","Test 3"="[5,inf)"))
data$phaseClass <- revalue(data$phaseClass, c("90"=0,"270"=1))
data$percentDiff = 0
for (name in unique(data$sid)){
for (chan in unique(data[data$sid == name,]$channel)){
for (numStimTrial in unique(data$numStims)){
numBase = nrow(data[data$sid == name & data$channel == chan & data$numStims == 'Base',])
base = data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$magnitude
baseMean = mean(base)
data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$percentDiff = 100*(base - baseMean)/baseMean
for (typePhase in unique(data$phaseClass)){
percentDiff = 100*((data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$magnitude)-baseMean)/baseMean
data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$percentDiff = percentDiff
}
}
}
}
sapply(data,class)
#summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), function(x) mean(x[,"percentDiff"]))
summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), summarize, percentDiff = mean(percentDiff))
dataNoBaseline = data[data$numStims != "Base",]
p2 <- ggplot(summaryData, aes(x=numStims, y=percentDiff,fill=phaseClass)) + theme_classic(base_size = 18) +
geom_dotplot(binaxis='y',binwidth=2,stackdir='center',
position=position_dodge(0.8)) +
geom_pointrange(mapping = aes(x = numStims, y = percentDiff,color=phaseClass),
stat = "summary",
fun.ymin = function(z) {quantile(z,0.25)},
fun.ymax = function(z) {quantile(z,0.75)},
fun.y = median,
position=position_dodge(0.8),size=1.2,color="black",show.legend = FALSE) +
labs(x = 'Number of conditioning stimuli',colour = 'delivered phase',title = 'Dose dependence as a function of phase of stimulation',y = 'Percent difference from baseline')+
geom_hline(yintercept=0)
p2
fit.glm2    = glm(magnitude ~ numStims+phaseClass+betaLabels+channel,data=data)
summary(fit.glm2)
plot(fit.glm2)
fit.glm2    = glm(magnitude ~ numStims+phaseClass+betaLabels,data=data)
plot(fit.glm2)
fit.lmm2 = lmer(percentDiff~numStims+phaseClass+betaLabels + (1 | sid/channel) ,data=dataNoBaseline)
plot(fit.lmm2)
qqnorm(resid(fit.lmm2))
qqline(resid(fit.lmm2))  #summary(fit.lmm2)
summary(glht(fit.lmm2,linfct=mcp(numStims="Tukey")))
summary(glht(fit.lmm2,linfct=mcp(betaLabels="Tukey")))
summary(glht(fit.lmm2,linfct=mcp(phaseClass="Tukey")))
summary(glht(fit.lmm2,linfct=mcp(numStims="Tukey")))
summary(glht(fit.lmm2,linfct=mcp(phaseClass="Tukey")))
fit.lmm2
fit.lmm3 = lmer(percentDiff~numStims+phaseClass+betaLabels + (1 | sid/channel) ,data=summaryData)
summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel,betaLabels), summarize, percentDiff = mean(percentDiff))
dataNoBaseline = data[data$numStims != "Base",]
fit.lmm3 = lmer(percentDiff~numStims+phaseClass+betaLabels + (1 | sid/channel) ,data=summaryData)
summary(fit.lmm3)
plot(fit.lmm3)
qqnorm(resid(fit.lmm2))
qqline(resid(fit.lmm2))  #summary(fit.lmm2)
qqnorm(resid(fit.lmm3))
qqline(resid(fit.lmm3))  #summary(fit.lmm2)
summary(glht(fit.lmm3,linfct=mcp(numStims="Tukey")))
summary(glht(fit.lmm3,linfct=mcp(betaLabels="Tukey")))
summary(glht(fit.lmm3,linfct=mcp(phaseClass="Tukey")))
summary(glht(fit.lmm3,linfct=mcp(numStims="Tukey")))
p2 <- ggplot(dataNoBaseline, aes(x=numStims, y=percentDiff,fill=phaseClass)) + theme_classic(base_size = 18) +
geom_boxplot(binaxis='y',binwidth=2,stackdir='center',
position=position_dodge(0.8)) +
geom_dotplot(data = dataNoBaseline, aes(y=predict(fit.lmm2,level=0,newdata = dataNoBaseline))) +
labs(x = 'Number of conditioning stimuli',colour = 'delivered phase',title = 'Dose dependence as a function of phase of stimulation',y = 'Percent difference from baseline')+
geom_hline(yintercept=0)
p2
p2 <- ggplot(summaryData, aes(x=numStims, y=percentDiff,fill=phaseClass)) +
geom_boxplot(mapping = aes(x = numStims, y = percentDiff,fill=phaseClass),
position=position_dodge(0.8),notch=TRUE)  +
geom_dotplot(binaxis='y',binwidth=2,stackdir='center',
position=position_dodge(0.8))+
labs(x = 'Number of conditioning stimuli',colour = 'delivered phase',title = 'Dose dependence as a function of phase of stimulation',y = 'Percent difference from baseline')
p2
p2 + geom_hline(yintercept=0) + theme_classic()
p2 <- ggplot(summaryData, aes(x=numStims, y=percentDiff,fill=phaseClass)) + theme_classic(base_size = 18) +
geom_dotplot(binaxis='y',binwidth=2,stackdir='center',
position=position_dodge(0.8)) +
geom_pointrange(mapping = aes(x = numStims, y = percentDiff,color=phaseClass),
stat = "summary",
fun.ymin = function(z) {quantile(z,0.25)},
fun.ymax = function(z) {quantile(z,0.75)},
fun.y = median,
position=position_dodge(0.8),size=1.2,color="black",show.legend = FALSE) +
labs(x = 'Number of conditioning stimuli',colour = 'delivered phase',title = 'Dose dependence as a function of phase of stimulation',y = 'Percent difference from baseline')+
geom_hline(yintercept=0)
p2
data <- read.table(here("Experiment","BetaTriggeredStim","betaStim_outputTable_50_3avg.csv"),header=TRUE,sep = ",",stringsAsFactors=F,
colClasses=c("magnitude"="numeric","betaLabels"="factor","sid"="factor","numStims"="factor","stimLevel"="numeric","channel"="factor","subjectNum"="factor","phaseClass"="factor","setToDeliverPhase"="factor"))
#data <- subset(data, magnitude<1000)
data <- subset(data,!is.nan(data$magnitude))
data <- subset(data,data$sid!='702d24')
# rename for ease
data$numStims <- revalue(data$numStims, c("Test 1"="[1,2]","Test 2"="[3,4]","Test 3"="[5,inf)"))
data$phaseClass <- revalue(data$phaseClass, c("90"=0,"270"=1))
data$percentDiff = 0
for (name in unique(data$sid)){
for (chan in unique(data[data$sid == name,]$channel)){
for (numStimTrial in unique(data$numStims)){
numBase = nrow(data[data$sid == name & data$channel == chan & data$numStims == 'Base',])
base = data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$magnitude
baseMean = mean(base)
data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$percentDiff = 100*(base - baseMean)/baseMean
for (typePhase in unique(data$phaseClass)){
percentDiff = 100*((data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$magnitude)-baseMean)/baseMean
data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$percentDiff = percentDiff
}
}
}
}
sapply(data,class)
#summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), function(x) mean(x[,"percentDiff"]))
summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel,betaLabels), summarize, percentDiff = mean(percentDiff))
dataNoBaseline = data[data$numStims != "Base",]
# ----
#data <- read.table(here("Experiment","BetaTriggeredStim","betaStim_outputTable.csv"),header=TRUE,sep = ",",stringsAsFactors=F)
ggplot(data, aes(x=magnitude)) +
geom_histogram(binwidth=100)
# # Change box plot colors by groups
# ggplot(data, aes(x=numStims, y=magnitude, fill=phaseClass)) +
#   geom_boxplot()
# Change the position
p<-ggplot(data, aes(x=numStims, y=magnitude, fill=phaseClass)) +
geom_boxplot(position=position_dodge(1))
p
# Change box plot colors by groups
# ggplot(summaryData, aes(x=numStims, y=percentDiff,fill=phaseClass)) +
#   geom_boxplot(notch=TRUE)
# Change the position
p<-ggplot(summaryData, aes(x=numStims, y=percentDiff,fill=phaseClass)) +
geom_boxplot(notch=TRUE,position=position_dodge(1)) +
geom_hline(yintercept=0)
p
p2 <- ggplot(summaryData, aes(x=numStims, y=percentDiff,fill=phaseClass)) + theme_classic(base_size = 18) +
geom_dotplot(binaxis='y',binwidth=2,stackdir='center',
position=position_dodge(0.8)) +
geom_pointrange(mapping = aes(x = numStims, y = percentDiff,color=phaseClass),
stat = "summary",
fun.ymin = function(z) {quantile(z,0.25)},
fun.ymax = function(z) {quantile(z,0.75)},
fun.y = median,
position=position_dodge(0.8),size=1.2,color="black",show.legend = FALSE) +
labs(x = 'Number of conditioning stimuli',colour = 'delivered phase',title = 'Dose dependence as a function of phase of stimulation',y = 'Percent difference from baseline')+
geom_hline(yintercept=0)
p2
# ----
data <- read.table(here("Experiment","BetaTriggeredStim","betaStim_outputTable_50_3avg.csv"),header=TRUE,sep = ",",stringsAsFactors=F,
colClasses=c("magnitude"="numeric","betaLabels"="factor","sid"="factor","numStims"="factor","stimLevel"="numeric","channel"="factor","subjectNum"="factor","phaseClass"="factor","setToDeliverPhase"="factor"))
#data <- subset(data, magnitude<1000)
data <- subset(data,!is.nan(data$magnitude))
data <- subset(data,data$sid!='702d24')
# rename for ease
data$numStims <- revalue(data$numStims, c("Test 1"="[1,2]","Test 2"="[3,4]","Test 3"="[5,inf)"))
#data$phaseClass <- revalue(data$phaseClass, c("90"=0,"270"=1))
data$percentDiff = 0
for (name in unique(data$sid)){
for (chan in unique(data[data$sid == name,]$channel)){
for (numStimTrial in unique(data$numStims)){
numBase = nrow(data[data$sid == name & data$channel == chan & data$numStims == 'Base',])
base = data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$magnitude
baseMean = mean(base)
data[data$sid == name & data$channel == chan & data$numStims == 'Base',]$percentDiff = 100*(base - baseMean)/baseMean
for (typePhase in unique(data$phaseClass)){
percentDiff = 100*((data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$magnitude)-baseMean)/baseMean
data[data$sid == name & data$channel == chan & data$numStims == numStimTrial & data$phaseClass == typePhase,]$percentDiff = percentDiff
}
}
}
}
sapply(data,class)
#summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel), function(x) mean(x[,"percentDiff"]))
summaryData = ddply(data[data$numStims != "Base",] , .(sid,phaseClass,numStims,channel,betaLabels), summarize, percentDiff = mean(percentDiff))
dataNoBaseline = data[data$numStims != "Base",]
# ----
#data <- read.table(here("Experiment","BetaTriggeredStim","betaStim_outputTable.csv"),header=TRUE,sep = ",",stringsAsFactors=F)
ggplot(data, aes(x=magnitude)) +
geom_histogram(binwidth=100)
# # Change box plot colors by groups
# ggplot(data, aes(x=numStims, y=magnitude, fill=phaseClass)) +
#   geom_boxplot()
# Change the position
p<-ggplot(data, aes(x=numStims, y=magnitude, fill=phaseClass)) +
geom_boxplot(position=position_dodge(1))
p
# Change box plot colors by groups
# ggplot(summaryData, aes(x=numStims, y=percentDiff,fill=phaseClass)) +
#   geom_boxplot(notch=TRUE)
# Change the position
p<-ggplot(summaryData, aes(x=numStims, y=percentDiff,fill=phaseClass)) +
geom_boxplot(notch=TRUE,position=position_dodge(1)) +
geom_hline(yintercept=0)
p
p2 <- ggplot(summaryData, aes(x=numStims, y=percentDiff,fill=phaseClass)) + theme_classic(base_size = 18) +
geom_dotplot(binaxis='y',binwidth=2,stackdir='center',
position=position_dodge(0.8)) +
geom_pointrange(mapping = aes(x = numStims, y = percentDiff,color=phaseClass),
stat = "summary",
fun.ymin = function(z) {quantile(z,0.25)},
fun.ymax = function(z) {quantile(z,0.75)},
fun.y = median,
position=position_dodge(0.8),size=1.2,color="black",show.legend = FALSE) +
labs(x = 'Number of conditioning stimuli',colour = 'delivered phase',title = 'Dose dependence as a function of phase of stimulation',y = 'Percent difference from baseline')+
geom_hline(yintercept=0)
p2
data
unique(data$phaseClass)
fit.lmm3 = lmer(percentDiff~numStims+phaseClass+betaLabels + (1 | sid/channel) ,data=summaryData)
summary(fit.lmm3)
fit.glm    = glm(percentDiff ~ numStims+phaseClass+betaLabels,data=dataNoBaseline)
summary(fit.glm)
fit.glm    = glm(percentDiff ~ numStims+phaseClass+betaLabels+channel,data=dataNoBaseline)
fit.glm
summary(fit.glm)
plot(fit.glm)
fit.lmm = lmer(percentDiff~numStims+phaseClass+betaLabels+channel+ (1| sid) ,data=dataNoBaseline)
summary(fit.lmm)
fit.lmm3 = lmer(percentDiff~numStims+phaseClass+betaLabels + (1 | sid/channel) ,data=summaryData)
fit.lmm3
fit.lmm3 = lmer(percentDiff~numStims+phaseClass + (1 | sid/channel) ,data=summaryData)
summary(fit.lmm3)
summary(glht(fit.lmm3,linfct=mcp(numStims="Tukey")))
summary(glht(fit.lmm3,linfct=mcp(betaLabels="Tukey")))
fit.lmm3 = lmer(percentDiff~numStims+phaseClass + betaLabels +  (1 | sid/channel) ,data=summaryData)
summary(fit.lmm3)
qqnorm(resid(fit.lmm3))
fit.lmm3 = lmer(percentDiff~numStims+phaseClass + betaLabels +  (1 | sid/channel) ,data=summaryData)
summaryData
dataSubjOnly <- subset(data,data$sid=='0b5a2e')
fit.lmm3 = lmer(percentDiff~numStims+phaseClass + betaLabels +  (1 | channel) ,data=summaryData)
fit.lmm3 = lmer(percentDiff~numStims+phaseClass + betaLabels +  (1 | channel) ,data=summaryData)
summary(fit.lmm3)
summary(glht(fit.lmm3,linfct=mcp(numStims="Tukey")))
summary(glht(fit.lmm3,linfct=mcp(betaLabels="Tukey")))
summary(glht(fit.lmm3,linfct=mcp(phaseClass="Tukey")))
fit.lmm3 = lmer(percentDiff~numStims+phaseClass + betaLabels +  (1 | sid/channel) ,data=summaryData)
summary(glht(fit.lmm3,linfct=mcp(numStims="Tukey")))
summary(glht(fit.lmm3,linfct=mcp(phaseClass="Tukey")))
fit.lmm3
fit.lmm3 = lmer(percentDiff~numStims+phaseClass + betaLabels +  (1 | sid) ,data=summaryData)
summary(fit.lmm3)
summary(glht(fit.lmm3,linfct=mcp(phaseClass="Tukey")))
fit.lmm3 = lmer(percentDiff~numStims+phaseClass + betaLabels + channels  +  (1 | sid) ,data=summaryData)
fit.lmm4 = lmer(percentDiff~numStims+phaseClass + betaLabels +  (1 | channel) ,data=dataSubjOnly)
summary(fit.lmm4)
