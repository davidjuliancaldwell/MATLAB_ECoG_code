POTENTIAL_SIDS = {...
    '7662c2'...
    ...%'04b3d5'...
    ...%'9ad250'...
    '30052b'...
    '4568f4'...
    'a557cc'...
    ...%'fd7d6f'...
    ...%'035489'...
    '3745d1'...
    '26cb98'...
    '8afafd'...
    'ad0310'...
    'fc9643'...
    '58411c'...
    ...%'3f5a8c'...
    '8381b8'...
    ...%'5e32d6'...
    ...%'bf889c'...
    ...%'4087bd'...
    ...%'3b787d'...
    ...%'e9f56f'...
    '0dd118'...
    ...%'d74850'...
    '7ee6bc'...
    'a052a1'...
    '38e116'...
    'f83dbb'...
};

% for each subject, get a list of UD .dat files
% make sure each file has paths
% count the number of trials
% determine chance performance

for zid = POTENTIAL_SIDS    
    sid = zid{:};
    files = listDatFiles(sid, '_ud');
    fprintf('processing %s (%d) ', sid, length(files));
    
    perf = [];
    bad = false;
    
    toBeUsed = zeros(size(files));
    for file = files
        
        [~,sta,~] = load_bcidat(file{:});
        
        if (~isRjb(sta))
            fprintf('x');
            bad = true;
        elseif(~hasPaths(sta))
            fprintf('y');
            bad = true;
        else            
            [perf(end+1), ntrials] = determinePerformance(sta);
            fprintf('%d ', ntrials);            
        end
    end
    
    if (mean(perf) < 0.55)
        fprintf('badperf ');
        bad = true;
    end
    
    if (isempty(files))
        fprintf('nofiles ');
        bad = true;
    end
    
    if (bad)
        fprintf('FAIL!\n');
    else
        fprintf('PASS!\n');
    end
    
end