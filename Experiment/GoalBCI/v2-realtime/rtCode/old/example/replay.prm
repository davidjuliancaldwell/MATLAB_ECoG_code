Source list ChannelNames= 0 // list of channel names
Source floatlist SourceChOffset= 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 % % // Offset for channels in A/D units
Source floatlist SourceChGain= 16 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 0.003 % % // gain for each channel (A/D units -> muV)
Storage string DataDirectory= ..\data ..\data % % // path to top level data directory (directory)
Storage string SubjectName= Name Name % % // subject alias
Storage string SubjectSession= 001 001 % % // three-digit session number
Storage string SubjectRun= 46 00 % % // two-digit run number
Storage string ID_System= % // BCI2000 System Code
Storage string ID_Amp= % // BCI2000 Amp Code
Storage string ID_Montage= % // BCI2000 Cap Montage Code
Visualize int VisualizeTiming= 1 1 0 1 // visualize system timing (0=no, 1=yes) (boolean)
Visualize int VisualizeSource= 1 1 0 1 // visualize raw brain signal (0=no, 1=yes) (boolean)
Visualize int VisualizeSourceDecimation= auto auto % % // decimation factor for raw brain signal
Visualize int VisualizeSourceBufferSize= auto auto % % // number of blocks to aggregate before sending to operator
Visualize int VisualizeSourceTime= 2s 2s 0 % // how much time in Source visualization
Visualize int SourceMin= -100muV -100muV % % // raw signal vis Min Value
Visualize int SourceMax= 100muV 100muV % % // raw signal vis Max Value
Source int SourceCh= 16 16 1 % // number of digitized and stored channels
Source int SampleBlockSize= 32 32 1 % // number of samples transmitted at a time
Source int SamplingRate= 256Hz 256Hz 1 % // sample rate
Source int ModulateAmplitude= 0 0 0 1 // Modulate the amplitude with the mouse (0=no, 1=yes) (boolean)
Source int SineChannelX= 0 0 0 % // Channel number of sinewave controlled by mouse x position
Source int SineChannelY= 0 0 0 % // Channel number of sinewave controlled by mouse y position (0 for all)
Source int SineChannelZ= 0 0 0 % // Channel number of sinewave controlled by mouse key state
Source float SineFrequency= 10Hz 10Hz % % // Frequency of sine wave
Source int SineAmplitude= 100muV 100muV % % // Amplitude of sine wave
Source int NoiseAmplitude= 30muV 30muV % % // Amplitude of white noise (common to all channels)
Source int DCOffset= 0muV 0muV % % // DC offset (common to all channels)
Source string AmplitudeMultiplier= 1 1 % % // Expression to multiply amplitude by
Source string OffsetMultiplier= % StimulusType % % // Expression to multiply offset by
Source int SignalType= 0 0 0 2 // numeric type of output signal:  0: int16, 1: float32, 2: int32 (enumeration)
Storage string StorageTime= 2014-02-04T14:06:04 // time of beginning of data storage
Source int AlignChannels= 1 0 0 1 // align channels in time (0=no, 1=yes)
Source floatlist SourceChTimeOffset= 0 0 % % // time offsets for all source channels (may be empty)
Source list TransmitChList= 4 1 2 3 4 // list of transmitted channels
System int EventLink= 1 1 0 1 // Send events from Operator to Source module (boolean)
System string OperatorIP= 127.0.0.1 127.0.0.1 % % // the Operator module's IP
System string SignalSourcePort= 53896 4200 1024 65535 // the SignalSource module's listening port
System string SignalSourceIP= 128.208.5.13 127.0.0.1 % % // the SignalSource module's listening IP
System matrix SignalSourceVersion= { Framework Revision Build } 1 3.0.5 % May%2014%202013%2017:01:36 // SignalSource version information
System matrix SignalSourceFilterChain= 8 { Filter%20Name Position%20String } DataIOFilter 0 SignalGeneratorADC 1 NullFileWriter 1 BCI2000FileWriter 1 EDFFileWriter 1 GDFFileWriter 1 AlignmentFilter 1.1 TransmissionFilter 1.2 // SignalSource filter chain
Visualize int VisualizeAlignmentFilter= 0 0 0 1 // Visualize AlignmentFilter output (boolean)
Visualize int VisualizeTransmissionFilter= 0 0 0 1 // Visualize TransmissionFilter output (boolean)
Visualize matrix VisPropertySets= 1 1 % // row titles are properties in the form "SRCD.Left", columns are property sets
System matrix OperatorVersion= { Framework Revision Build } 1 3.0.5 % May%2014%202013%2017:01:36 // operator module version information
System int OperatorBackLink= 1 1 0 1 // Send final state and signal information to Operator (boolean)
Filtering int SpatialFilterType= 3 2 0 3 // spatial filter type 0: none, 1: full matrix, 2: sparse matrix, 3: common average reference (CAR) (enumeration)
Filtering matrix SpatialFilter= 4 4 .75 -.25 -.25 -.25 -.25 .75 -.25 -.25 -.25 -.25 .75 -.25 -.25 -.25 -.25 .75 0 % % // columns represent input channels, rows represent output channels
Filtering intlist SpatialFilterCAROutput= 0 // when using CAR filter type: list of output channels, or empty for all channels
Filtering int SpatialFilterMissingChannels= 1 0 0 1 // how to handle missing channels 0: ignore, 1: report error (enumeration)
Filtering float FirstBinCenter= 0Hz 0Hz % % // Center of first frequency bin (in Hz)
Filtering float LastBinCenter= 30Hz 30Hz % % // Center of last frequency bin (in Hz)
Filtering float BinWidth= 3Hz 3Hz % % // Width of spectral bins (in Hz)
Filtering int OutputType= 0 0 0 2 // 0: Spectral Amplitude, 1: Spectral Power, 2: Coefficients (enumeration)
Filtering int ModelOrder= 16 16 0 % // AR model order
Filtering int EvaluationsPerBin= 15 15 1 % // Number of uniformly spaced evaluation points entering into a single bin value
Filtering int WindowLength= 0.5s 0.5s % % // Length of window
Filtering int Detrend= 0 0 0 2 // Detrend data? 0: no, 1: mean, 2: linear (enumeration)
Filtering int WindowFunction= 0 0 0 3 // Window function 0: Rectangular, 1: Hamming, 2: Hann, 3: Blackman (enumeration)
Filtering matrix Classifier= 2 { input%20channel input%20element%20(bin) output%20channel weight } 1 4 1 1 1 6 2 1 // Linear classification matrix in sparse representation
Filtering float LPTimeConstant= 0 16s 0 % // time constant for the low pass filter
Filtering string StartRunExpression= % // expression executed on StartRun
Filtering string StopRunExpression= % // expression executed on StopRun
Filtering matrix Expressions= 1 1 % // expressions used to compute the output of the ExpressionFilter (rows are channels; empty matrix for none)
Filtering floatlist NormalizerOffsets= 2 0 0 0 % % // normalizer offsets
Filtering floatlist NormalizerGains= 2 1 1 0 % % // normalizer gain values
Filtering intlist Adaptation= 2 0 0 0 0 2 // 0: no adaptation, 1: zero mean, 2: zero mean, unit variance (enumeration)
Filtering matrix BufferConditions= 2 1 (Feedback)&&(TargetCode==1) (Feedback)&&(TargetCode==2) // expressions corresponding to data buffers (columns correspond to output channels, multiple rows correspond to multiple buffers)
Filtering float BufferLength= 9s 9s % % // time window of past data per buffer that enters into statistic
Filtering string UpdateTrigger= (Feedback==0) // expression to trigger offset/gain update when changing from 0 (use empty string for continuous update)
System string SignalProcessingPort= 53892 4200 1024 65535 // the SignalProcessing module's listening port
System string SignalProcessingIP= 128.208.5.13 127.0.0.1 % % // the SignalProcessing module's listening IP
System matrix SignalProcessingVersion= { Framework Revision Build } 1 3.0.5 % May%2014%202013%2017:01:36 // SignalProcessing version information
System matrix SignalProcessingFilterChain= 6 { Filter%20Name Position%20String } SpatialFilter 2.B ARFilter 2.C LinearClassifier 2.D LPFilter 2.D1 ExpressionFilter 2.D2 Normalizer 2.E // SignalProcessing filter chain
Visualize int VisualizeSpatialFilter= 0 0 0 1 // Visualize SpatialFilter output (boolean)
Visualize int VisualizeARFilter= 0 0 0 1 // Visualize ARFilter output (boolean)
Visualize int VisualizeLinearClassifier= 0 0 0 1 // Visualize LinearClassifier output (boolean)
Visualize int VisualizeExpressionFilter= 0 0 0 1 // Visualize ExpressionFilter output (boolean)
Visualize int VisualizeLPFilter= 0 0 0 1 // Visualize LPFilter output (boolean)
Visualize int VisualizeNormalizer= 0 0 0 1 // Visualize Normalizer output (boolean)
Connector list ConnectorInputFilter= 0 // list of state names or signal elements to allow, "*" for any, signal elements as in "Signal(1,0)"
Connector string ConnectorInputAddress= % localhost:20320 % % // IP address/port to read from, e.g. localhost:20320
Application int WindowWidth= 640 640 0 % // width of Application window
Application int WindowHeight= 480 480 0 % // height of Application window
Application int WindowLeft= 0 0 % % // screen coordinate of Application window's left edge
Application int WindowTop= 0 0 % % // screen coordinate of Application window's top edge
Application string WindowBackgroundColor= 0x000000 0x505050 % % // Application window background color (color)
Visualize int VisualizeApplicationWindow= 0 0 0 1 // Display miniature copy of Application window (boolean)
Visualize int AppWindowSpatialDecimation= 8 8 1 % // Application window decimation (shrinking) factor
Visualize int AppWindowTemporalDecimation= 4 16 1 % // Application window time decimation factor
Visualize int ShowAppLog= 1 0 0 1 // Show application log window (boolean)
Application float PreRunDuration= 2s 2s 0 % // duration of pause preceding first trial
Application float PreFeedbackDuration= 2s 2s 0 % // duration of target display prior to feedback
Application float FeedbackDuration= 3s 3s 0 % // duration of feedback
Application float PostFeedbackDuration= 1s 1s 0 % // duration of result display after feedback
Application float ITIDuration= 1s 1s 0 % // duration of inter-trial interval
Application float MinRunLength= 120s 120s 0 % // minimum duration of a run; if blank, NumberOfTrials is used
Application int NumberOfTrials= % 0 0 % // number of trials; if blank, MinRunLength is used
Application int NumberTargets= 2 2 0 255 // number of targets
Application intlist TargetSequence= 0 1 % % // fixed sequence in which targets should be presented (leave empty for random)
Application int RenderingQuality= 1 0 0 1 // rendering quality: 0: low, 1: high (enumeration)
Application float MaxFeedbackDuration= 3s % 0 % // abort a trial after this amount of feedback time has expired
Application floatlist CameraPos= 3 50 50 150 // camera position vector in percent coordinates of 3D area
Application floatlist CameraAim= 3 50 50 50 // camera aim point in percent coordinates
Application int CameraProjection= 0 0 0 2 // projection type: 0: flat, 1: wide angle perspective, 2: narrow angle perspective (enumeration)
Application floatlist LightSourcePos= 3 50 50 100 // light source position in percent coordinates
Application int LightSourceColor= 0x808080 // light source RGB color (color)
Application int WorkspaceBoundaryColor= 0xffffff 0 % % // workspace boundary color (0xff000000 for invisible) (color)
Application string WorkspaceBoundaryTexture= images/grid.bmp // path of workspace boundary texture (inputfile)
Application float CursorWidth= 10 10 0.0 % // feedback cursor width in percent of screen width
Application int CursorColorFront= 0xff0000 // cursor color when it is at the front of the workspace (color)
Application int CursorColorBack= 0xffff00 // cursor color when it is in the back of the workspace (color)
Application string CursorTexture= % // path of cursor texture (inputfile)
Application floatlist CursorPos= 3 50 50 50 // cursor starting position
Application matrix Targets= 5 { pos%20x pos%20y pos%20z width%20x width%20y width%20z } 35 35 50 8 8 8 65 35 50 8 8 8 35 65 50 8 8 8 65 65 50 8 8 8 0 0 4 8 8 8 // target positions and widths in percentage coordinates
Application int TargetColor= 0x808080 // target color (color)
Application string TargetTexture= % // path of target texture (inputfile)
Application int TestAllTargets= 0 0 0 1 // test all targets for cursor collision? 0: test only the visible current target, 1: test all targets (enumeration)
Application float TargetDwellTime= 0.5s % 0 % // amount of time user must dwell on target to succeed in trial 
Application int BiasActive= 0 0 0 1 // determines whether or not biasing is occuring (boolean)
Application string ModelFile= % // path to SVM model file (inputfile)
Application float BiasMagnitude= 0.5 % 0 1 // amount to bias start position from 0 (none) to 1 (half of screen). 
Application intlist CatchTrials= 0 // trial numbers where biasing WILL NOT occur
Application string KeystrokeStateName= % // State to be translated into keystrokes (0-F), empty for off
Application string KeystrokeExpression= % // Expression that evaluates to a virtual keycode, empty for off
Application string KeystrokeExpressionOnStartRun= % // Expression that initializes expression variables on StartRun
Connector string ConnectorOutputAddress= % localhost:20321 % % // one or more IP:Port combinations, e.g. localhost:20321
Application string Language= Default Default % % // Language for user messages
Application matrix LocalizedStrings= { German } { Timeout Be%20prepared%20... } Inaktiv Achtung%20... // Localized user messages
System string ApplicationPort= 53894 4200 1024 65535 // the Application module's listening port
System string ApplicationIP= 128.208.5.13 127.0.0.1 % % // the Application module's listening IP
System matrix ApplicationVersion= { Framework Revision Build } 1 3.0.5 % Feb%20%204%202014%2011:30:44 // Application version information
System matrix ApplicationFilterChain= 4 { Filter%20Name Position%20String } ConnectorInput 2.9999 CursorFeedbackTask 3 KeystrokeFilter 3.1 ConnectorOutput 3.9999 // Application filter chain
System int RandomSeed= 11919 0 % % // seed for the BCI2000 pseudo random number generator
System int RandomizationWarning= 1 1 0 1 // warn if subsequent Runs have identical RandomSeed value (boolean)
System int StateVectorLength= 141 16 % % // length of the state vector in bytes
